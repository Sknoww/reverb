name: Build and Release
on:
  push:
    tags:
      - 'v*'
permissions:
  contents: write
  packages: write
jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: npm run build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        run: npm run build:mac
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Prepare macOS artifacts
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          mkdir -p artifacts
          # Create zip with DMG and README for each DMG file found
          for dmg in release/*.dmg; do
            if [ -f "$dmg" ]; then
              basename_dmg=$(basename "$dmg" .dmg)
              zip "artifacts/${basename_dmg}-with-readme.zip" "$dmg" README.md
              echo "Created ${basename_dmg}-with-readme.zip"
            fi
          done
          # Also copy original files if they exist (preserving original functionality)
          cp release/*.dmg artifacts/ 2>/dev/null || true
          cp release/*.zip artifacts/ 2>/dev/null || true
      - name: Prepare Windows artifacts
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "artifacts" -Force

          # Function to create zip with exe and README
          function Create-ZipWithReadme {
            param($ExeFile)
            if (Test-Path $ExeFile) {
              $baseName = [System.IO.Path]::GetFileNameWithoutExtension($ExeFile)
              $zipPath = "artifacts/$baseName-with-readme.zip"
              Compress-Archive -Path $ExeFile, "README.md" -DestinationPath $zipPath -Force
              Write-Host "Created $baseName-with-readme.zip"
            }
          }

          # Try to find installers in multiple locations and create zips
          if (Test-Path "release") {
            Get-ChildItem "release" -Filter "*-setup.exe" | ForEach-Object { Create-ZipWithReadme $_.FullName }
            Get-ChildItem "release" -Filter "*.exe" | ForEach-Object { Create-ZipWithReadme $_.FullName }

            # Also copy original files (preserving original functionality)
            try { Copy-Item "release/*-setup.exe" "artifacts/" -ErrorAction SilentlyContinue } catch { Write-Host "No setup.exe files found in release directory" }
            try { Copy-Item "release/*.exe" "artifacts/" -ErrorAction SilentlyContinue } catch { Write-Host "No exe files found in release directory" }
          }
          if (Test-Path "dist") {
            Get-ChildItem "dist" -Filter "*-setup.exe" | ForEach-Object { Create-ZipWithReadme $_.FullName }
            Get-ChildItem "dist" -Filter "*.exe" | ForEach-Object { Create-ZipWithReadme $_.FullName }

            # Also copy original files (preserving original functionality)
            try { Copy-Item "dist/*-setup.exe" "artifacts/" -ErrorAction SilentlyContinue } catch { Write-Host "No setup.exe files found in dist directory" }
            try { Copy-Item "dist/*.exe" "artifacts/" -ErrorAction SilentlyContinue } catch { Write-Host "No exe files found in dist directory" }
          }
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: artifacts/
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: List downloaded files
        run: find . -type f | sort
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *-artifacts/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
